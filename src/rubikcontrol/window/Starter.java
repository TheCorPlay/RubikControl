/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rubikcontrol.window;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import rubikcontrol.RubikControl;
import rubikcontrol.commons.Tiempo;

/**
 *
 * @author Fernando
 */
public class Starter extends javax.swing.JFrame{
    boolean cronometroActivo;
    boolean enUso;
    boolean espacioPulsado;
    int conteo;
    
    /**
     * Creates new form Starter
     */
    public Starter() {
        initComponents();
        this.setVisible(true);
        enUso = false;
        espacioPulsado = false;
        
        jMenuItemCubo.setAccelerator(javax.swing.KeyStroke.
                getKeyStroke('C', Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));
        jMenuItemSesion.setAccelerator(javax.swing.KeyStroke.
                getKeyStroke('S', Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask()));
        
        initCloseOperation();
        
        this.setLocationRelativeTo(null);
    }
    
    private void initCloseOperation() {
        WindowListener exitListener = new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                RubikControl.guardar();
                System.exit(0);
            }
        };
        this.addWindowListener(exitListener);
    }
    
    public Image getIconImage () {
        return Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("rubikcontrol/image/cubo.png"));
    }
    
    public void setList(DefaultListModel<String> list) {
        jListTiempos.setModel(list);
    }
    
    public void addCubo(String cubo) {
        jComboBoxCubo.addItem(cubo);
    }
    
    private boolean esUltimaSesion() {
        String sesion =(String) jComboBoxSesion.getSelectedItem();
        String [] split = sesion.split(" ");
        int numSesion = Integer.parseInt(split[1]);
        
        String cubo = (String) jComboBoxCubo.getSelectedItem();
        
        return !RubikControl.existeSesion(cubo, numSesion + 1);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTimer = new javax.swing.JLabel();
        jLabelInfo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxCubo = new javax.swing.JComboBox<>();
        jComboBoxSesion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTiempos = new javax.swing.JList<>();
        jButtonEliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabelRecord = new javax.swing.JLabel();
        jLabelMediaCubo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldUltimasCubo = new javax.swing.JTextField();
        jLabelUltimasCubo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelrecordTime = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabelMediaSesion = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldUltimasSesion = new javax.swing.JTextField();
        jLabelMediaUltimosSesion = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuItemCreditos = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuAnadir = new javax.swing.JMenu();
        jMenuItemCubo = new javax.swing.JMenuItem();
        jMenuItemSesion = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemResetearCubo = new javax.swing.JMenuItem();
        jMenuItemResetearSesion = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemResetProgram = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Rubik Control");
        setIconImage(getIconImage());
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rubikcontrol/image/cubo.png"))); // NOI18N

        jLabelTimer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTimer.setText("00:00:000");

        jLabelInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelInfo.setText("<Pulsa Espacio>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabelTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tiempos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel2.setFocusable(false);
        jPanel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPanel2KeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cubo:");

        jComboBoxCubo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2x2", "3x3", "4x4", "5x5" }));
        jComboBoxCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCuboActionPerformed(evt);
            }
        });
        jComboBoxCubo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxCuboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxCuboKeyReleased(evt);
            }
        });

        jComboBoxSesion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sesi√≥n 1" }));
        jComboBoxSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSesionActionPerformed(evt);
            }
        });
        jComboBoxSesion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxSesionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxSesionKeyReleased(evt);
            }
        });

        jListTiempos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListTiemposKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListTiemposKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jListTiempos);

        jButtonEliminar.setText("Eliminar Seleccionado");
        jButtonEliminar.setFocusable(false);
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jButtonEliminar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonEliminarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButtonEliminarKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxCubo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jComboBoxSesion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminar)
                .addGap(39, 39, 39))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estad√≠sticas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cubo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabelRecord.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelRecord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRecord.setText("Record Personal");

        jLabelMediaCubo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelMediaCubo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMediaCubo.setText("00:00:000");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Media √∫ltimas");

        jTextFieldUltimasCubo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldUltimasCubo.setText("5");
        jTextFieldUltimasCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUltimasCuboActionPerformed(evt);
            }
        });

        jLabelUltimasCubo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelUltimasCubo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelUltimasCubo.setText("00:00:000");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Media");

        jLabelrecordTime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelrecordTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelrecordTime.setText("00:00:000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelMediaCubo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldUltimasCubo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabelUltimasCubo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelrecordTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMediaCubo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldUltimasCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUltimasCubo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelRecord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelrecordTime)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sesi√≥n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Media");

        jLabelMediaSesion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelMediaSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMediaSesion.setText("00:00:000");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Media √∫ltimas");

        jTextFieldUltimasSesion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldUltimasSesion.setText("5");
        jTextFieldUltimasSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUltimasSesionActionPerformed(evt);
            }
        });
        jTextFieldUltimasSesion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldUltimasSesionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldUltimasSesionKeyTyped(evt);
            }
        });

        jLabelMediaUltimosSesion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelMediaUltimosSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMediaUltimosSesion.setText("00:00:000");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelMediaSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldUltimasSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabelMediaUltimosSesion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMediaSesion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldUltimasSesion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMediaUltimosSesion))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuArchivo.setText("Archivo");

        jMenuItemCreditos.setText("Cr√©ditos");
        jMenuItemCreditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreditosActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemCreditos);
        jMenuArchivo.add(jSeparator3);

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemSalir);

        jMenuBar.add(jMenuArchivo);

        jMenuAnadir.setText("Editar");

        jMenuItemCubo.setMnemonic('C');
        jMenuItemCubo.setText("A√±adir Cubo");
        jMenuItemCubo.setToolTipText("");
        jMenuItemCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCuboActionPerformed(evt);
            }
        });
        jMenuAnadir.add(jMenuItemCubo);

        jMenuItemSesion.setMnemonic('S');
        jMenuItemSesion.setText("A√±adir Sesi√≥n");
        jMenuItemSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSesionActionPerformed(evt);
            }
        });
        jMenuAnadir.add(jMenuItemSesion);
        jMenuAnadir.add(jSeparator1);

        jMenuItemResetearCubo.setText("Resetear Cubo");
        jMenuItemResetearCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetearCuboActionPerformed(evt);
            }
        });
        jMenuAnadir.add(jMenuItemResetearCubo);

        jMenuItemResetearSesion.setText("Resetear Sesion");
        jMenuItemResetearSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetearSesionActionPerformed(evt);
            }
        });
        jMenuAnadir.add(jMenuItemResetearSesion);
        jMenuAnadir.add(jSeparator2);

        jMenuItemResetProgram.setText("Resetear Programa");
        jMenuItemResetProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetProgramActionPerformed(evt);
            }
        });
        jMenuAnadir.add(jMenuItemResetProgram);

        jMenuBar.add(jMenuAnadir);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (!espacioPulsado && evt.VK_SPACE == evt.getKeyCode() && esUltimaSesion()) {
            //Cuando se reincie se coloca nuevamente en 00:00:000
            espacioPulsado = true;

            if (enUso) {
                pararCronometro();
            } else {
                new Thread () {
                    @Override
                    public void run() {
                        conteo = 0;
                        jLabelTimer.setForeground(Color.red);
                        jLabelInfo.setText("<Manten Presionado>");
                        while (espacioPulsado) {
                            try {
                                Thread.sleep( 1 );
                                //Incrementamos 1 milesimas de segundo
                                conteo += 1;
                                if (conteo == 1000) {
                                    jLabelTimer.setForeground(new Color(0,153,0));
                                    jLabelTimer.setText( "00:00:000" );
                                    jLabelInfo.setText("<Puedes Empezar>");
                                }
                            } catch (InterruptedException ex) {

                            }
                        }
                    }
                }.start();
            }
        }
    }//GEN-LAST:event_formKeyPressed
    
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (espacioPulsado) {
            espacioPulsado = false;
            jLabelTimer.setForeground(Color.black);
            if (!enUso && conteo >= 1000) {
                enUso = true;
                iniciarCronometro();
            }
            else {
                enUso = false;
            }
        }
    }//GEN-LAST:event_formKeyReleased

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        String cubo = (String) jComboBoxCubo.getSelectedItem();
        String ses = (String) jComboBoxSesion.getSelectedItem();
        int selected = jListTiempos.getSelectedIndex();
        
        if (selected != -1) {
            String [] split = ses.split(" ");
            if (esUltimaSesion()) {
                RubikControl.eliminarTiempo(cubo, Integer.parseInt(split[1]), selected);
                actualizaSesion();
                RubikControl.actualizaRecord(cubo);
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jPanel2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel2KeyPressed
//        formKeyPressed(evt);
    }//GEN-LAST:event_jPanel2KeyPressed

    private void jPanel2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel2KeyReleased
//        formKeyReleased(evt);
    }//GEN-LAST:event_jPanel2KeyReleased

    private void jComboBoxCuboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxCuboKeyPressed
        this.requestFocus();
        formKeyPressed(evt);
    }//GEN-LAST:event_jComboBoxCuboKeyPressed

    private void jComboBoxCuboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxCuboKeyReleased
        formKeyReleased(evt);
    }//GEN-LAST:event_jComboBoxCuboKeyReleased

    private void jComboBoxSesionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxSesionKeyPressed
        this.requestFocus();
        formKeyPressed(evt);
    }//GEN-LAST:event_jComboBoxSesionKeyPressed

    private void jComboBoxSesionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxSesionKeyReleased
        formKeyReleased(evt);
    }//GEN-LAST:event_jComboBoxSesionKeyReleased

    private void jButtonEliminarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonEliminarKeyPressed
//        formKeyPressed(evt);
    }//GEN-LAST:event_jButtonEliminarKeyPressed

    private void jButtonEliminarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonEliminarKeyReleased
//        formKeyReleased(evt);
    }//GEN-LAST:event_jButtonEliminarKeyReleased

    private void jListTiemposKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListTiemposKeyPressed
        formKeyPressed(evt);
    }//GEN-LAST:event_jListTiemposKeyPressed

    private void jListTiemposKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListTiemposKeyReleased
        formKeyReleased(evt);
    }//GEN-LAST:event_jListTiemposKeyReleased

    private void jTextFieldUltimasCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUltimasCuboActionPerformed
        actualizaSesion();
        this.requestFocus();
    }//GEN-LAST:event_jTextFieldUltimasCuboActionPerformed

    private void jTextFieldUltimasSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUltimasSesionActionPerformed
        actualizaSesion();
        this.requestFocus();
    }//GEN-LAST:event_jTextFieldUltimasSesionActionPerformed
    
    private void actualizaSesion () {
        String cubo = (String) jComboBoxCubo.getSelectedItem();
        String aux = (String) jComboBoxSesion.getSelectedItem();
        String ultimas = jTextFieldUltimasSesion.getText();
        String ultimasCubo = jTextFieldUltimasCubo.getText();
        if (aux == null)
            aux = "Sesi√≥n 1";
        String [] sesion = aux.split(" ");
        try {
            RubikControl.actualizaUltimosSesion (cubo, Integer.parseInt(sesion[1]), Integer.parseInt(ultimas));
            RubikControl.actualizaUltimosCubo(cubo, ultimaSesion(), Integer.parseInt(ultimasCubo));
        } catch (NumberFormatException ex) {
            // Nothing
        }
    }
    
    private void jMenuItemCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCuboActionPerformed
        JOptionPane panel = new JOptionPane();
        
        String cubo = panel.showInputDialog("Ingrese un nombre de cubo: ");
        if (cubo != null && cubo != "" && cubo != " " && RubikControl.addCubo(cubo)){
            jComboBoxCubo.addItem(cubo);
            jComboBoxCubo.setSelectedItem(cubo);
        }
    }//GEN-LAST:event_jMenuItemCuboActionPerformed

    private void jComboBoxCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCuboActionPerformed
        String sesion = (String)jComboBoxSesion.getSelectedItem();
        String[] numero = sesion.split(" ");
        String cubo = (String)jComboBoxCubo.getSelectedItem();
        
        int numeroInt = Integer.parseInt(numero[1]);
        
        if (numeroInt <= RubikControl.numSesiones(cubo)) {
            RubikControl.changeList(cubo, numeroInt);
        }
        else {
            RubikControl.changeList(cubo, 1);
        }
        actualizarSesiones(RubikControl.numSesiones(cubo));
        actualizaSesion();
        RubikControl.getRecord(cubo);
    }//GEN-LAST:event_jComboBoxCuboActionPerformed

    public void actualizarSesiones (int sesionesNuevo) {
        // Actualiza el tama√±o del combo box...
        // Ya ver√© como
        jComboBoxSesion.removeAllItems();
        
        for (int i = 1; i <= sesionesNuevo; i++) {
            jComboBoxSesion.addItem("Sesi√≥n " + i);
        }
        jComboBoxSesion.setSelectedIndex(0);
    }
    
    public void setMediaSesion (int minutos, int segundos, int milesimas) {
        String mins, segs, mil;
        if (minutos == 0) {
            mins = "00";
        } else {
            mins = String.valueOf(minutos);
            if (mins.length() == 1) {
                mins = "0" + mins; 
            }
        }
        if (segundos == 0) {
            segs = "00";
        } else {
            segs = String.valueOf(segundos);
            if (segs.length() == 1) {
                segs = "0" + segs; 
            }
        }
        if (milesimas == 0) {
            mil = "000";
        } else {
            mil = String.valueOf(milesimas);
            if (mil.length() == 1) {
                mil = "00" + mil; 
            } else if (mil.length() == 2) {
                mil = "0" + mil;
            }
        }
        jLabelMediaSesion.setText(mins + ":" + segs + ":" + mil);
    }
    
    public void setUltimosSesion (int minutos, int segundos, int milesimas) {
        String mins, segs, mil;
        if (minutos == 0) {
            mins = "00";
        } else {
            mins = String.valueOf(minutos);
            if (mins.length() == 1) {
                mins = "0" + mins; 
            }
        }
        if (segundos == 0) {
            segs = "00";
        } else {
            segs = String.valueOf(segundos);
            if (segs.length() == 1) {
                segs = "0" + segs; 
            }
        }
        if (milesimas == 0) {
            mil = "000";
        } else {
            mil = String.valueOf(milesimas);
            if (mil.length() == 1) {
                mil = "00" + mil; 
            } else if (mil.length() == 2) {
                mil = "0" + mil;
            }
        }
        jLabelMediaUltimosSesion.setText(mins + ":" + segs + ":" + mil);
    }
    
    public void setMediaCubo (int minutos, int segundos, int milesimas) {
        String mins, segs, mil;
        if (minutos == 0) {
            mins = "00";
        } else {
            mins = String.valueOf(minutos);
            if (mins.length() == 1) {
                mins = "0" + mins; 
            }
        }
        if (segundos == 0) {
            segs = "00";
        } else {
            segs = String.valueOf(segundos);
            if (segs.length() == 1) {
                segs = "0" + segs; 
            }
        }
        if (milesimas == 0) {
            mil = "000";
        } else {
            mil = String.valueOf(milesimas);
            if (mil.length() == 1) {
                mil = "00" + mil; 
            } else if (mil.length() == 2) {
                mil = "0" + mil;
            }
        }
        jLabelMediaCubo.setText(mins + ":" + segs + ":" + mil);
    }
    
    public void setUltimosCubo (int minutos, int segundos, int milesimas) {
        String mins, segs, mil;
        if (minutos == 0) {
            mins = "00";
        } else {
            mins = String.valueOf(minutos);
            if (mins.length() == 1) {
                mins = "0" + mins; 
            }
        }
        if (segundos == 0) {
            segs = "00";
        } else {
            segs = String.valueOf(segundos);
            if (segs.length() == 1) {
                segs = "0" + segs; 
            }
        }
        if (milesimas == 0) {
            mil = "000";
        } else {
            mil = String.valueOf(milesimas);
            if (mil.length() == 1) {
                mil = "00" + mil; 
            } else if (mil.length() == 2) {
                mil = "0" + mil;
            }
        }
        jLabelUltimasCubo.setText(mins + ":" + segs + ":" + mil);
    }
    
    public void setRecord(int milesimas) {
        int minutos = 0, segundos = 0;
        while (milesimas >= 1000) {
            milesimas-=1000;
            segundos++;
            if (segundos == 60) {
                segundos = 0;
                minutos++;
            }
        }
        
        String mins, segs, mil;
        if (minutos == 0) {
            mins = "00";
        } else {
            mins = String.valueOf(minutos);
            if (mins.length() == 1) {
                mins = "0" + mins; 
            }
        }
        if (segundos == 0) {
            segs = "00";
        } else {
            segs = String.valueOf(segundos);
            if (segs.length() == 1) {
                segs = "0" + segs; 
            }
        }
        if (milesimas == 0) {
            mil = "000";
        } else {
            mil = String.valueOf(milesimas);
            if (mil.length() == 1) {
                mil = "00" + mil; 
            } else if (mil.length() == 2) {
                mil = "0" + mil;
            }
        }
        jLabelrecordTime.setText(mins + ":" + segs + ":" + mil);
    }
    
    private void jMenuItemSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSesionActionPerformed
        String cubo = (String) jComboBoxCubo.getSelectedItem();
        int a = RubikControl.numSesiones(cubo) + 1;
        RubikControl.addSesion(cubo, a);
        jComboBoxSesion.addItem("Sesi√≥n " + a);
        jComboBoxSesion.setSelectedIndex(a-1);
    }//GEN-LAST:event_jMenuItemSesionActionPerformed

    private void jComboBoxSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSesionActionPerformed
        String sesion = (String)jComboBoxSesion.getSelectedItem();
        if (sesion == null)
            sesion = "Sesi√≥n 1";
        String[] numero = sesion.split(" ");
        String cubo = (String)jComboBoxCubo.getSelectedItem();
        RubikControl.changeList(cubo, Integer.parseInt(numero[1]));
        RubikControl.actualizaMediaSesion(cubo, Integer.parseInt(numero[1]));
        RubikControl.actualizaMediaCubo(cubo, ultimaSesion());
        actualizaSesion();
    }//GEN-LAST:event_jComboBoxSesionActionPerformed
    
    public int ultimaSesion () {
        String cubo = (String)jComboBoxCubo.getSelectedItem();
        for (int i = 1; ;i++) {
            if (!RubikControl.existeSesion(cubo, i)) {
                return i - 1;
            }
        }
    }
    
    private void jTextFieldUltimasSesionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUltimasSesionKeyPressed
        //actualizaSesion();
    }//GEN-LAST:event_jTextFieldUltimasSesionKeyPressed

    private void jTextFieldUltimasSesionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUltimasSesionKeyTyped
        actualizaSesion();
    }//GEN-LAST:event_jTextFieldUltimasSesionKeyTyped

    private void jMenuItemResetearCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetearCuboActionPerformed
        // Resetear cubo
        int ax = JOptionPane.showConfirmDialog(null, "¬øSeguro que deseas borrar tus tiempos del cubo?", "Borrar", JOptionPane.YES_NO_OPTION);
        if(ax == JOptionPane.YES_OPTION) {        
            RubikControl.resetearCubo((String)jComboBoxCubo.getSelectedItem());
    //        actualizaSesion();
            actualizarSesiones(1);
        }
    }//GEN-LAST:event_jMenuItemResetearCuboActionPerformed

    private void jMenuItemResetearSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetearSesionActionPerformed
        // Resetear sesi√≥n
        int ax = JOptionPane.showConfirmDialog(null, "¬øSeguro que deseas borrar tus tiempos de la sesi√≥n?", "Borrar", JOptionPane.YES_NO_OPTION);
        if(ax == JOptionPane.YES_OPTION) { 
            int sesion = Integer.parseInt(((String)jComboBoxSesion.getSelectedItem()).split(" ")[1]);
            String cubo = (String)jComboBoxCubo.getSelectedItem();
            RubikControl.resetearSesion(cubo, sesion);
            RubikControl.actualizaRecord(cubo);
            jLabelMediaUltimosSesion.setText("00:00:000");
            RubikControl.actualizaUltimosCubo(cubo, sesion, Integer.parseInt(jTextFieldUltimasCubo.getText()));
        }
    }//GEN-LAST:event_jMenuItemResetearSesionActionPerformed

    private void jMenuItemResetProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetProgramActionPerformed
        // Resetear programa
        int ax = JOptionPane.showConfirmDialog(null, "¬øSeguro que deseas borrar TODOS tus tiempos?", "Borrar", JOptionPane.YES_NO_OPTION);
        if(ax == JOptionPane.YES_OPTION) { 
            RubikControl.resetearPrograma();
            jLabelMediaSesion.setText("00:00:000");
            jLabelMediaUltimosSesion.setText("00:00:000");
            jLabelMediaCubo.setText("00:00:000");
            jLabelUltimasCubo.setText("00:00:000");
            jLabelrecordTime.setText("00:00:000");

            jComboBoxCubo.removeAllItems();
            jComboBoxCubo.addItem("2x2");
            jComboBoxCubo.addItem("3x3");
            jComboBoxCubo.addItem("4x4");
            jComboBoxCubo.addItem("5x5");
        }
    }//GEN-LAST:event_jMenuItemResetProgramActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        RubikControl.guardar();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jMenuItemCreditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreditosActionPerformed
        JOptionPane.showMessageDialog(null,
                new JLabel("<html>Todo el programa est√° hecho por:<br>"
                + "Fernando P√©rez Guti√©rrez<br>"
                + "Programa gratuito, pero con derechos de CopyRight</html>", JLabel.CENTER) , "Creditos", 1);
        
                
    }//GEN-LAST:event_jMenuItemCreditosActionPerformed
    
    //Iniciar el cronometro poniendo cronometroActivo 
    //en verdadero para que entre en el while
    public void iniciarCronometro() {
        cronometroActivo = true;
        new Thread() {
            @Override
            public void run(){
                jLabelInfo.setText("<Buen Tiempo!>");
                Integer minutos = 0 , segundos = 0, milesimas = 0;
                //min es minutos, seg es segundos y mil es milesimas de segundo
                String min="", seg="", mil="";
                try
                {
                    //Mientras cronometroActivo sea verdadero entonces seguira
                    //aumentando el tiempo
                    while(cronometroActivo)
                    {
                        Thread.sleep( 1 );
                        //Incrementamos 1 milesimas de segundo
                        milesimas += 1;
                        
                        if (!tiempoMenorMedia(minutos, segundos, milesimas)) {
                            jLabelInfo.setText("<Puedes hacerlo mejor>");
                        }

                        //Cuando llega a 1000 osea 1 segundo aumenta 1 segundo
                        //y las milesimas de segundo de nuevo a 0
                        if( milesimas == 1000 )
                        {
                            milesimas = 0;
                            segundos += 1;
                            //Si los segundos llegan a 60 entonces aumenta 1 los minutos
                            //y los segundos vuelven a 0
                            if( segundos == 60 )
                            {
                                segundos = 0;
                                minutos++;
                            }
                        }

                        //Esto solamente es estetica para que siempre este en formato
                        //00:00:000
                        if( minutos < 10 ) min = "0" + minutos;
                        else min = minutos.toString();
                        if( segundos < 10 ) seg = "0" + segundos;
                        else seg = segundos.toString();

                        if( milesimas < 10 ) mil = "00" + milesimas;
                        else if( milesimas < 100 ) mil = "0" + milesimas;
                        else mil = milesimas.toString();

                        //Colocamos en la etiqueta la informacion
                        jLabelTimer.setText( min + ":" + seg + ":" + mil );                
                    }
                    
                    // Enviamos el tiempo y lo guardamos
                    String sesion = (String)jComboBoxSesion.getSelectedItem();
                    String[] numero = sesion.split(" ");
                    RubikControl.addTime((String)jComboBoxCubo.getSelectedItem(),
                            Integer.parseInt(numero[1]),
                            new Tiempo (minutos, segundos, milesimas));
                    actualizaSesion();
                    jLabelInfo.setText("<Pulsa Espacio>");
                }catch(InterruptedException e){}
            }
        }.start();
    }
    
    public boolean tiempoMenorMedia(int minutos, int segundos, int milesimas) {
        String [] tiempos = jLabelMediaSesion.getText().split(":");
        int minMedia = Integer.parseInt(tiempos[0]);
        int segMedia = Integer.parseInt(tiempos[1]);
        int milMedia = Integer.parseInt(tiempos[2]);
        
        if (minutos < minMedia || (minMedia == 0 && segMedia == 0 && milMedia == 0))
            return true;
        if (minutos == minMedia && segundos < segMedia)
            return true;
        if (minutos == minMedia && segundos == segMedia && milesimas < milMedia)
            return true;
        
        return false;
    }
    
    //Esto es para parar el cronometro
    public void pararCronometro(){
        cronometroActivo = false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Starter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JComboBox<String> jComboBoxCubo;
    private javax.swing.JComboBox<String> jComboBoxSesion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JLabel jLabelMediaCubo;
    private javax.swing.JLabel jLabelMediaSesion;
    private javax.swing.JLabel jLabelMediaUltimosSesion;
    private javax.swing.JLabel jLabelRecord;
    private javax.swing.JLabel jLabelTimer;
    private javax.swing.JLabel jLabelUltimasCubo;
    private javax.swing.JLabel jLabelrecordTime;
    private javax.swing.JList<String> jListTiempos;
    private javax.swing.JMenu jMenuAnadir;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemCreditos;
    private javax.swing.JMenuItem jMenuItemCubo;
    private javax.swing.JMenuItem jMenuItemResetProgram;
    private javax.swing.JMenuItem jMenuItemResetearCubo;
    private javax.swing.JMenuItem jMenuItemResetearSesion;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemSesion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTextField jTextFieldUltimasCubo;
    private javax.swing.JTextField jTextFieldUltimasSesion;
    // End of variables declaration//GEN-END:variables
}
